name: Claude PR Review

on:
  pull_request:
    types: [opened, synchronize, reopened]
    branches: ["**"]

permissions:
  contents: read
  pull-requests: write

jobs:
  review:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Get changed files
        id: changes
        uses: tj-actions/changed-files@v45
        with:
          files: |
            **/*.py
            **/*.js
            **/*.ts
            **/*.tsx
            **/*.json
            **/*.yml
            **/*.yaml
            **/*.md

      - name: Build prompt + call Claude + comment PR
        uses: actions/github-script@v7
        env:
          ANTHROPIC_API_KEY: ${{ secrets.ANTHROPIC_API_KEY }}
          CLAUDE_MODEL: ${{ secrets.CLAUDE_MODEL }}
        with:
          script: |
            const fs = require("fs");
            const path = require("path");

            // Liste des fichiers modifi√©s (string avec \n)
            const changed = `\n${{ steps.changes.outputs.all_changed_files }}`.trim();
            const files = changed ? changed.split("\n").filter(Boolean) : [];

            // Lit le contenu (avec troncature)
            const MAX_TOTAL_CHARS = 30000;
            let total = 0;
            let bundle = "";

            for (const f of files) {
              try {
                const p = path.join(process.env.GITHUB_WORKSPACE, f);
                let content = fs.readFileSync(p, "utf8");
                if (content.length > 8000) {
                  content = content.slice(0, 8000) + "\n\n# [TRONQU√â]\n";
                }
                const block = `\n\n===== FILE: ${f} =====\n${content}\n`;
                if (total + block.length > MAX_TOTAL_CHARS) break;
                bundle += block;
                total += block.length;
              } catch {}
            }
            if (!bundle.trim()) bundle = "Aucun contenu lisible n'a √©t√© collect√©.";

            const pr = context.payload.pull_request;
            const basePrompt = `
R√©ponds en fran√ßais.
Tu es un relecteur de code strict.
- D√©tecte : erreurs de logique, imports manquants, appels async sans await/r√©ponse, r√©f√©rences √† des fonctions inexistantes, mauvais chemins, conflits de merge, tests cass√©s, typos, fichiers manquants √©voqu√©s par le code.
- Propose SEULEMENT des correctifs et un listing clair (pas d'optimisation ni refactor facultatif).
- Indique les fichiers/lignes quand possible.
- Sortie : sections "‚ö†Ô∏è Probl√®mes", "‚úÖ Correctifs propos√©s", "üß™ Tests/commandes √† lancer", "üìã R√©sum√©".

Contexte PR:
- Titre: ${pr.title}
- Auteur: ${pr.user.login}
- Branches: ${pr.head.ref} ‚Üí ${pr.base.ref}
- URL: ${pr.html_url}

Fichiers modifi√©s (troncature possible) :
${bundle}
            `.trim();

            const model = process.env.CLAUDE_MODEL || "claude-3-5-sonnet-latest";

            const resp = await fetch("https://api.anthropic.com/v1/messages", {
              method: "POST",
              headers: {
                "x-api-key": process.env.ANTHROPIC_API_KEY,
                "anthropic-version": "2023-06-01",
                "content-type": "application/json"
              },
              body: JSON.stringify({
                model,
                max_tokens: 2000,
                temperature: 0,
                messages: [{ role: "user", content: basePrompt }]
              })
            });

            if (!resp.ok) {
              const text = await resp.text();
              core.setFailed(`Appel Claude KO: ${resp.status} ${text}`);
            }

            const data = await resp.json();
            const content = Array.isArray(data.content) && data.content[0]?.text
              ? data.content[0].text
              : JSON.stringify(data, null, 2);

            const body = `### ü§ñ Revue automatique par Claude\n\n${content}`;
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: pr.number,
              body
            });

            // Optionnel: √©chouer la CI si "CRITICAL" d√©tect√© dans le rapport
            if (String(content).toUpperCase().includes("CRITICAL")) {
              core.setFailed("Des probl√®mes CRITICAL ont √©t√© d√©tect√©s par Claude.");
            }
